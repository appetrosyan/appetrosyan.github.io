import{_ as a,c as t,a as s,o as i}from"./app-DUCnD5ZL.js";const o={};function n(d,e){return i(),t("div",null,e[0]||(e[0]=[s(`<h1 id="a-zeroth-order-guide-to-privelege-escalation" tabindex="-1"><a class="header-anchor" href="#a-zeroth-order-guide-to-privelege-escalation"><span>A zeroth-order guide to privelege escalation</span></a></h1><p>This is not meant to be a detailed comparison, just a back-of-the-envelope guide explaining why you should or shouldn&#39;t use a particular program in particular circumstances.</p><h3 id="sudo" tabindex="-1"><a class="header-anchor" href="#sudo"><span><code>sudo</code></span></a></h3><p>This program is sadly, considered the default on most GNU+Linux distributions. It is a rather complex beast, despite the fact that it is, for lack of a better term, the original <code>systemd</code>, an ugly piece of code that almost everyone hates, but still runs for some reason. Not to say that <code>systemd</code> is bad, these days it&#39;s perhaps what it was meant to be all along, but <code>sudo</code> is something that you likely need to know about, but also something that you should avoid if possible on your own machines.</p><p>Contrary too popular belief, this program is not built-in. It is, in fact, not even installed, unless explicitly specified on newbiew-friendly advanced distributions such as ArchLinux.</p><p>So what do you need to know about <code>sudo</code>. Well, it&#39;s an SUID binary. 99% of the codebase is completely inert, in that you don&#39;t actually use most of it, all you use if for is privelege escalation for the <code>root</code> user.</p><p>Is this a bad thing? Yes. The program, by sheer size is a huge attack surface. If you can avoid it, please do.</p><p>One thing I should mention is that <code>sudo</code> comes with <code>sudoedit</code>, which is a program that would have been nice when editors couldn&#39;t privelege escalate on their own. Most editos are either used as <code>sudo vim</code> or can do privelege escalation internally, such as <code>kate</code> and <code>emacs</code>.</p><p><code>sudo -E</code> is an important case where the environment must be preserved, for example, when you&#39;re doing something that the original <code>sudo</code> is ill-equipped to do, that is running a graphical application. The implementation is considered sub-par, to the point, where both KDE and Gnome had their own replacements, <code>kdesudo</code> and <code>gsudo</code>. Both deprecated by the way. The consensus, is that if you have the technical budget to create a graphical program, you surely also have the technical budget to do privelege escalation properly.</p><p>This program is configured via the <code>sudoers</code> file. The trouble with that file, is that it has an obtuse syntax, and must be edited with a special program: <code>visudo</code>. Don&#39;t you feel like you&#39;re safe already?</p><h3 id="doas" tabindex="-1"><a class="header-anchor" href="#doas"><span>Doas</span></a></h3><p>Doas is what <code>sudo</code> should have been. It&#39;s a TUI-only alternative to <code>sudo</code>, that uses the same mechanism, but by virtue of being much smaller, and better maintained, seems to have fewer unknown vulnerabilities.</p><p>The entire man page for <code>doas</code> fits into half a screen. Its usage is small-enough so that people undestand what it actually does.</p><p>The configuration file is both straightforward, and can be specified via the <code>-c</code> flag, which usually means that the user can easily change it. The greatest improvement that <code>doas</code> offers over <code>sudo</code> is that it actually explains much of the stuff that is buried deep in the abstractions.</p><p>I found it much easier to try and set up particular rules for particular programs. If you ask me, just use <code>doas</code> if you have the ability to do so.</p><h3 id="polkit" tabindex="-1"><a class="header-anchor" href="#polkit"><span>Polkit</span></a></h3><p>This is what I use. This program is likely to come pre-installed. It is what <code>systemd</code> falls back on, if you try to perform an action that needs root priveleges, but you forgot to use <code>sudo</code>. Its main advantage is that it lives in the modern day and age. It is a program that integrates with your desktop environment, and you can make WMs work just as well. You can make rules in .... ewww... JavaScript. But other than that, the program is fairly straightforward.</p><p>Ideally, it doesn&#39;t require any input. Any operation that must require privelege escalation, must be performed in an isolated process and the privelege must be de-escalated as quickly as possible. That is not something that you can do, while keeping the UX of <code>sudo</code>, where <code>sudo make</code> has different abilities to just regular <code>make</code>.</p><p>One reason I choose to use it as the SUID binary with <code>paru</code>, is because I often use it to compile <code>emacs-git</code>, and that takes a while. I often put it in the background and do other stuff. On more than one occasion, I had to re-run the compilation several times with <code>sudo</code>, because I missed the time when the terminal prompted me for input. Sure, I now know that <code>konsole</code> has a way to monitor for silence, but that is neither here nor there. Add <code>pkexec</code> as a drop-in replacement for <code>sudo</code> and you&#39;re golden.</p><p>As an added bonus, you have the option to do this:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">WRAPPER USAGE</span>
<span class="line">       To avoid modifying existing software to prefix their command-line invocations with pkexec, it&#39;s possible to use pkexec in a she-bang wrapper[1]</span>
<span class="line">       like this:</span>
<span class="line"></span>
<span class="line">           #!/usr/bin/pkexec /usr/bin/python</span>
<span class="line"></span>
<span class="line">           import os</span>
<span class="line">           import sys</span>
<span class="line"></span>
<span class="line">           print &quot;Hello, I&#39;m running as uid %d&quot;%(os.getuid())</span>
<span class="line"></span>
<span class="line">           for n in range(len(sys.argv)):</span>
<span class="line">               print &quot;arg[%d]=â€˜%s&#39;&quot;%(n, sys.argv[n])</span>
<span class="line"></span>
<span class="line">       If this script is installed into /usr/bin/my-pk-test, then the following annotations</span>
<span class="line"></span>
<span class="line">             [...]</span>
<span class="line">             &lt;annotate key=&quot;org.freedesktop.policykit.exec.path&quot;&gt;/usr/bin/python&lt;/annotate&gt;</span>
<span class="line">             &lt;annotate key=&quot;org.freedesktop.policykit.exec.argv1&quot;&gt;/usr/bin/my-pk-test&lt;/annotate&gt;</span>
<span class="line">             [...]</span>
<span class="line"></span>
<span class="line">       can be used to select the appropriate polkit action. Be careful to get the latter annotation right, otherwise it will match any pkexec invocation</span>
<span class="line">       of /usr/bin/python scripts.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So the user experience can be improved at the source, and packaged up. For obvious reasons, the rules need to be edited in some way, and the mornonic choice of using XML is a pain, but the work in making the system be standard, be reliable, and be supported by multiple applications is already done. I think that the <code>suckless</code> crowd would find it far easier to patch in a different file type, rather than try and implement their own, inferior design.</p><h3 id="systemd-run0" tabindex="-1"><a class="header-anchor" href="#systemd-run0"><span>Systemd run0</span></a></h3><p>This program is quite an interesting beast. I tried to hate it, and almost managed to do so, but at some point I realised that it is actually a very good substitute for <code>sudo</code>. It is <em>not</em> an SUID program, and as a consequence, the security of it, in places where SUID style privelege escalation would be problematic, and re-writing programs to use something like <code>polkit</code> would be difficult, <code>run0</code> finds a nice niche.</p><p>I can see myself using <code>run0</code> and <code>polkit</code> exclusively. But the program hasn&#39;t been well-tested, so feel free to experiment with it, but don&#39;t blame me if it breaks. It&#39;s all very early days.</p>`,25)]))}const l=a(o,[["render",n],["__file","privilege-escalation.html.vue"]]),c=JSON.parse(`{"path":"/posts/privilege-escalation.html","title":"A zeroth-order guide to privelege escalation","lang":"en-GB","frontmatter":{"category":["Guide","Systems Administration"],"date":"2024-06-12T00:00:00.000Z"},"headers":[{"level":3,"title":"sudo","slug":"sudo","link":"#sudo","children":[]},{"level":3,"title":"Doas","slug":"doas","link":"#doas","children":[]},{"level":3,"title":"Polkit","slug":"polkit","link":"#polkit","children":[]},{"level":3,"title":"Systemd run0","slug":"systemd-run0","link":"#systemd-run0","children":[]}],"git":{"updatedTime":1742748808000,"contributors":[{"name":"Aleksandr Petrosyan","username":"","email":"ap886@cantab.ac.uk","commits":4}],"changelog":[{"hash":"2504feacfc8e83978d0f3b7c3a3f7df06b5b48c6","time":1742748808000,"email":"ap886@cantab.ac.uk","author":"Aleksandr Petrosyan","message":"[vuepress]: Migrating articles"},{"hash":"bc5bda253540556643ed855b2cd5c7ee23c67889","time":1742747283000,"email":"ap886@cantab.ac.uk","author":"Aleksandr Petrosyan","message":"[vuepress]: Initial migration"},{"hash":"301abaf8c3d5149bde360018d81e0f59317f7d3b","time":1718167637000,"email":"ap886@cantab.ac.uk","author":"Aleksandr Petrosyan","message":"[fix]: Grammar"},{"hash":"736aaa207f1d760077d46441182ee46962730370","time":1718167518000,"email":"ap886@cantab.ac.uk","author":"Aleksandr Petrosyan","message":"[guide]: Privelege escalation"}]},"filePathRelative":"posts/privilege-escalation.md","excerpt":"\\n<p>This is not meant to be a detailed comparison, just a\\nback-of-the-envelope guide explaining why you should or shouldn't use\\na particular program in particular circumstances.</p>\\n<h3><code>sudo</code></h3>\\n<p>This program is sadly, considered the default on most GNU+Linux\\ndistributions.  It is a rather complex beast, despite the fact that it\\nis, for lack of a better term, the original <code>systemd</code>, an ugly piece\\nof code that almost everyone hates, but still runs for some reason.\\nNot to say that <code>systemd</code> is bad, these days it's perhaps what it was\\nmeant to be all along, but <code>sudo</code> is something that you likely need to\\nknow about, but also something that you should avoid if possible on\\nyour own machines.</p>"}`);export{l as comp,c as data};
