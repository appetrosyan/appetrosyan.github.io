import{_ as a,c as n,a as e,o as t}from"./app-DUCnD5ZL.js";const o={};function p(l,s){return t(),n("div",null,s[0]||(s[0]=[e(`<h1 id="how-to-set-up-lsp-in-emacs" tabindex="-1"><a class="header-anchor" href="#how-to-set-up-lsp-in-emacs"><span>How to set up LSP in Emacs</span></a></h1><p>This is a semi-rant, but I believe a worthwhile use of my time. There are two compliant implementations of the language server protocol, which do not have a bipartisan objective review attached to them.</p><p>Some would argue that <code>eglot</code> is superior by virtue of being in the Emacs core, some would instead argue that <code>lsp-mode</code> is more feature complete and far more lenient towards language servers with non-standard extensions. Those are true, but they only affect the first-hand experience, something that only a total script kiddie will complain about.</p><p>As an intermediate Emacsian, I believe my insight to be of use both to script kiddies that will eventually transition to masters, as well as masters that do not believe in such nonsense as LSP.</p><p>Without further ado.</p><h2 id="lsp-mode" tabindex="-1"><a class="header-anchor" href="#lsp-mode"><span>LSP-mode</span></a></h2><p>This is the most presentable of the bunch. It comes with a <a href="https://emacs-lsp.github.io/lsp-mode/" target="_blank" rel="noopener noreferrer">well-groomed website</a>, a detailed set of instructions, and frankly some of the broadest supports for language-server-specific features. It also comes with the companion mode for <code>dap-mode</code>, which, as the name suggests is going to be major source of pain, but will eventually allow one to use some debuggers in some languages.</p><p>My setup if I were using <code>lsp-mode</code> would look like this</p><div class="language-emacs-lisp line-numbers-mode" data-highlighter="prismjs" data-ext="emacs-lisp"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">use-package</span> lsp-mode</span>
<span class="line">  <span class="token lisp-property property">:ensure</span> <span class="token boolean">t</span></span>
<span class="line">  <span class="token lisp-property property">:bind</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token lisp-property property">:map</span> lsp-mode-map</span>
<span class="line">		<span class="token punctuation">(</span><span class="token string">&quot;<span class="token argument">C-</span>.&quot;</span> <span class="token punctuation">.</span> xref-find-definitions<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">(</span><span class="token string">&quot;C-c C-r&quot;</span> <span class="token punctuation">.</span> lsp-rename<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">(</span><span class="token string">&quot;C-&lt;return&gt;&quot;</span> <span class="token punctuation">.</span> lsp-execute-code-action<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">(</span><span class="token string">&quot;C-c m&quot;</span> <span class="token punctuation">.</span> lsp-rust-analyzer-open-cargo-toml<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token lisp-property property">:custom</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token car">lsp-inlay-hint-enable</span> <span class="token boolean">t</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token car">lsp-rust-analyzer-closure-return-type-hints</span> <span class="token string">&quot;with_block&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token car">lsp-rust-analyzer-display-chaining-hints</span> <span class="token boolean">t</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token car">lsp-rust-analyzer-display-closure-return-type-hints</span> <span class="token boolean">t</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token car">lsp-completion-enable</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token car">lsp-rust-analyzer-cargo-watch-command</span> <span class="token string">&quot;clippy&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token car">lsp-rust-analyzer-display-reborrow-hints</span> <span class="token string">&quot;mutable&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token lisp-property property">:hook</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token car">lsp-mode</span> <span class="token punctuation">.</span> lsp-inlay-hints-mode<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token car">lsp-mode</span> <span class="token punctuation">.</span> yas-minor-mode<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, most guides will assume that you know what this means, but as Emacs doesn&#39;t have much beginner friendly documentation, but instead assumes that you will discover lisp forms on your own, it bears explaining some of this at least once.</p><h3 id="detour-use-package" tabindex="-1"><a class="header-anchor" href="#detour-use-package"><span>Detour, <code>use-package</code></span></a></h3><p>\`</p>`,12)]))}const c=a(o,[["render",p],["__file","lsp-emacs.html.vue"]]),r=JSON.parse('{"path":"/posts/lsp-emacs.html","title":"How to set up LSP in Emacs","lang":"en-GB","frontmatter":{"category":["Emacs","Work","Tooling"],"date":["2024-07-28T00:00:00.000Z"]},"headers":[{"level":2,"title":"LSP-mode","slug":"lsp-mode","link":"#lsp-mode","children":[{"level":3,"title":"Detour, use-package","slug":"detour-use-package","link":"#detour-use-package","children":[]}]}],"git":{"updatedTime":1742748808000,"contributors":[{"name":"Aleksandr Petrosyan","username":"","email":"ap886@cantab.ac.uk","commits":3}],"changelog":[{"hash":"2504feacfc8e83978d0f3b7c3a3f7df06b5b48c6","time":1742748808000,"email":"ap886@cantab.ac.uk","author":"Aleksandr Petrosyan","message":"[vuepress]: Migrating articles"},{"hash":"bc5bda253540556643ed855b2cd5c7ee23c67889","time":1742747283000,"email":"ap886@cantab.ac.uk","author":"Aleksandr Petrosyan","message":"[vuepress]: Initial migration"},{"hash":"216b1423adc50dbcb54cc722a419949f016d6637","time":1722195434000,"email":"ap886@cantab.ac.uk","author":"Aleksandr Petrosyan","message":"[article]: Keeping Emacs speedy"}]},"filePathRelative":"posts/lsp-emacs.md","excerpt":"\\n<p>This is a semi-rant, but I believe a worthwhile use of my time.  There\\nare two compliant implementations of the language server protocol,\\nwhich do not have a bipartisan objective review attached to them.</p>\\n<p>Some would argue that <code>eglot</code> is superior by virtue of being in the\\nEmacs core, some would instead argue that <code>lsp-mode</code> is more feature\\ncomplete and far more lenient towards language servers with\\nnon-standard extensions.  Those are true, but they only affect the\\nfirst-hand experience, something that only a total script kiddie will\\ncomplain about.</p>"}');export{c as comp,r as data};
